{"version":3,"sources":["components/Button/Button.tsx","layouts/Filter/FilterRadio/FilterRadio.tsx","layouts/Filter/FilterSearch/FilterSearch.tsx","layouts/Filter/index.tsx","components/THead/THead.tsx","components/TBody/TBody.tsx","layouts/Pagination/index.tsx","application/App/App.functions.ts","application/App/App.tsx","index.tsx"],"names":["Button","children","className","handleClick","onClick","FilterRadio","name","fields","handleChange","icons","content","Object","entries","map","index","key","value","htmlFor","length","icon","type","id","onChange","checked","FilterSearch","handleSearch","placeholder","Filter","filter","setFilter","useState","isOpen","setIsOpen","filterItemActiveCls","btnActiveCls","filterActiveCls","column","operation","search","operationIcons","faAngleRight","faAngleLeft","faEquals","faPuzzlePiece","event","newState","targer","target","chooseValue","filterObject","field","faTimes","faFilter","THead","TITLES","title","TBody","filtered","date","number","distance","Pagination","filteredCount","entriesOnPage","currentPage","handlePagination","pageNumbers","setPageNumbers","useEffect","division","Math","ceil","nums","num","push","paginationCalcFunc","lastIndex","firstIndex","slice","App","setEntries","setFiltered","setFilteredCount","setCurrentPage","more","less","equal","contains","a","fetch","req","json","ans","currentEntries","newEntries","params","isColumnChoosed","isOperationChoosed","isSearchFill","entry","isNaN","toString","includes","filterFunction","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95a8db6c.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport './Button.css';\nimport { Props } from './Button.interface';\n\n/**\n * Button component\n * @param {React.ReactElement | React.ReactNode | string} children - any children no required\n * @param {string} className - string className no required\n * @param {() => void} handleClick - function handleClick required\n * @returns {React.ReactElement} - returns react element\n */\nconst Button: FC<Props> = ({\n  children,\n  className = '',\n  handleClick,\n}): React.ReactElement => {\n  return (\n    <button className={`${className} button`} onClick={handleClick}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { FC } from 'react';\n\nimport './FilterRadio.css';\nimport { Props } from './FilterRadio.interface';\n\n/**\n * FilterRadio component, that contains radio - inputs, which set up filter\n * @param {string} className - no required,\n * @param {string} name - required, name of group inputs\n * @param {[key: string]: boolean} fields - required,\n * object with boolean field\n * @param {(event: React.ChangeEvent) => void} handleChange - required,\n * function, that handle radio inputs\n * @returns {React.ReactElement} - returns react element\n */\n\n//prettier-ignore\nconst FilterRadio: FC<Props> = ({ className = \"\", name, fields, handleChange, icons = [] }): React.ReactElement => {\n  const entries = Object.entries(fields); //* Created entries from a common object\n  const content = entries.map(([key, value], index: number) => (\n    <li className=\"filter-radio__item\" key={index}>\n      <label \n        className={`filter-radio__label ${value ? \"filter-radio__label_active\" : \"\"}`} \n        htmlFor={key}\n      >\n        {\n          icons.length === 0 \n            ? key\n            : <FontAwesomeIcon icon={icons[index]}/> \n        }\n        <input\n          className=\"filter-radio__input\"\n          name={name}\n          type=\"radio\"\n          value={key}\n          id={key}\n          onChange={handleChange}\n          checked={value}\n        />\n      </label>\n    </li>\n  ));\n  return <ul className={`filter-radio ${className}`}>{content}</ul>;\n};\n\nexport default FilterRadio;\n","import React, { FC } from 'react';\n\nimport './FilterSearch.css';\nimport { Props } from './FilterSearch.interface';\n\n/**\n * FilterSearch component\n * @param {string} value - required\n * @param {(event: React.ChangeEvent) => void} handleSearch - required\n * @returns {React.ReactElement} - returns react element\n */\n\nconst FilterSearch: FC<Props> = ({\n  className = '',\n  value,\n  handleSearch,\n}): React.ReactElement => {\n  return (\n    <ul className={'filter-search ' + className}>\n      <li className=\"filter-search__item\">\n        <input\n          className=\"input filter-search__input\"\n          placeholder=\"Search...\"\n          onChange={handleSearch}\n          value={value}\n          type=\"text\"\n        />\n      </li>\n    </ul>\n  );\n};\n\nexport default FilterSearch;\n","import React, { FC, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faPuzzlePiece,\n  faAngleRight,\n  faAngleLeft,\n  faEquals,\n  faFilter,\n  faTimes,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../components/Button/Button';\nimport FilterRadio from './FilterRadio/FilterRadio';\nimport FilterSearch from './FilterSearch/FilterSearch';\n\nimport './index.css';\nimport { Props } from './index.interface';\n\n/**\n * Filter components that contains all options of\n * sort, you may choose filter by 3 stage\n * 1) column\n * 2) signals (more, lest, equal and keep)\n * 3) text field\n *\n * @param {FilterInterface} filter\n * @param {Function} setFilter\n * @returns {React.ReactElement} - returns react element\n */\n\nconst Filter: FC<Props> = ({\n  filter,\n  setFilter,\n}): React.ReactElement => {\n  //* ----------------------------------------------\n  //* Show or hide sub menu with filter\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const handleClick = (): void => {\n    setIsOpen(!isOpen);\n  };\n\n  //* Dynamic styles\n  const filterItemActiveCls: string = isOpen\n    ? 'filter__item_active'\n    : 'filter__item_noactive';\n  const btnActiveCls: string = isOpen ? 'button_active' : '';\n  const filterActiveCls: string = isOpen ? 'filter_active' : '';\n\n  //* ----------------------------------------------------\n  const { column, operation, search } = filter;\n  const operationIcons = [\n    faAngleRight,\n    faAngleLeft,\n    faEquals,\n    faPuzzlePiece,\n  ];\n\n  //* In this case, we are handling radio buttons\n  const handleChange = (event: React.ChangeEvent): void => {\n    //* We are creating copy of state;\n    const newState = { ...filter };\n    const targer = event.target as HTMLInputElement;\n    const chooseValue: string = targer.value;\n    const chooseName: string = targer.name;\n\n    //* We are choosing category about column or operation\n    const filterObject =\n      chooseName === 'column' ? newState.column : newState.operation;\n\n    //* If it's value we are seting true\n    //* else false\n    for (let field in filterObject) {\n      field !== chooseValue\n        ? (filterObject[field] = false)\n        : (filterObject[chooseValue] = true);\n    }\n\n    //* And finaly, we are seting new state\n    setFilter(newState);\n  };\n\n  const handleSearch = (event: React.ChangeEvent): void => {\n    const newState = { ...filter };\n    const targer = event.target as HTMLInputElement;\n\n    //* We are changing search value\n    newState.search = targer.value;\n    setFilter(newState);\n  };\n\n  return (\n    <ul className={`filter ${filterActiveCls}`}>\n      <li className=\"filter__item\">\n        <Button className={btnActiveCls} handleClick={handleClick}>\n          <FontAwesomeIcon icon={isOpen ? faTimes : faFilter} />\n        </Button>\n      </li>\n      <li\n        className={`filter__item filter__submenu ${filterItemActiveCls}`}\n      >\n        <FilterRadio\n          className=\"filter__nested\"\n          handleChange={handleChange}\n          fields={column}\n          name=\"column\"\n        />\n        <FilterRadio\n          className=\"filter__nested\"\n          handleChange={handleChange}\n          icons={operationIcons}\n          fields={operation}\n          name=\"operation\"\n        />\n        <FilterSearch handleSearch={handleSearch} value={search} />\n      </li>\n    </ul>\n  );\n};\n\nexport default Filter;\n","import React, { FC } from 'react';\n\nimport './THead.css';\nimport { Props, TitlesType } from './THead.interface';\n\n/**\n * THead is header of table component\n * @returns {React.ReactElement} - returns react element\n */\nconst THead: FC<Props> = ({}): React.ReactElement => {\n  //* ------------------------------------------------\n  //* Titles of cols\n  const titles: TitlesType = ['Date', 'Name', 'Number', 'Distance'];\n  const TITLES: React.ReactNode = titles.map(\n    (title: string, index: number) => (\n      <th className={'thead__th'} key={index}>\n        {title}\n      </th>\n    ),\n  );\n\n  return (\n    <thead className=\"thead\">\n      <tr className=\"thead__tr\">{TITLES}</tr>\n    </thead>\n  );\n};\n\nexport default THead;\n","import React, { FC } from 'react';\n\nimport './TBody.css';\nimport { Props } from './TBody.interface';\nimport { Entry } from '../../application/App/App.interface';\n\n/**\n * THead is body of table component\n * @param {Entry[]} filtered\n * @returns {React.ReactElement} - returns react element\n */\nconst TBody: FC<Props> = ({ filtered }): React.ReactElement => {\n  const content: React.ReactNode = filtered.map(\n    ({ id, date, name, number, distance }: Entry) => (\n      <tr className=\"tbody__tr\" key={id}>\n        <td className=\"tbody__td\">{date}</td>\n        <td className=\"tbody__td\">{name}</td>\n        <td className=\"tbody__td\">{number}</td>\n        <td className=\"tbody__td\">{distance}</td>\n      </tr>\n    ),\n  );\n  return <tbody className=\"tbody\">{content}</tbody>;\n};\n\nexport default TBody;\n","import React, { FC, useEffect, useState } from 'react';\n\nimport Button from '../../components/Button/Button';\n\nimport './index.css';\nimport { Props } from './index.interface';\nimport { Entry } from '../../application/App/App.interface';\n\n/**\n * Pagination\n * @param {Entry[]} entries\n * @param {Entry[]} filtered\n * @param {number} entriesOnPage\n * @param {number} currentPage\n * @param {(num: number) => void} handlePagination\n * @returns {React.ReactElement} returns react element\n */\n\n// prettier-ignore\nconst Pagination: FC<Props> = ({ entries, filteredCount, entriesOnPage, currentPage, handlePagination }): React.ReactElement => {\n  //* -------------------------------------------------------------------------\n  //* All page numbers\n  const [pageNumbers, setPageNumbers] = useState<number[]>([]);\n  const activeBtnCls: string = 'button_active';\n  \n  useEffect(() => {\n    let division: number = Math.ceil(filteredCount / entriesOnPage);\n    let nums: number[] = [];\n    \n    //* In this case we get all page numbers  \n    for (let num = 1; num <= division; num++) {\n      nums.push(num);\n    }\n    \n    //* And set new value\n    setPageNumbers(nums)\n  }, [filteredCount]);\n\n  return (\n    <ul className=\"pagination\">\n      {pageNumbers.map((num: number) => (\n        <li className=\"pagination__item\" key={num}>\n          <Button \n            className={currentPage === num ? activeBtnCls : ''} \n            handleClick={() => handlePagination(num)}>\n            {num}\n          </Button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Pagination;\n","import {\n  Entry,\n  FilterFunction,\n  PaginationCalcFunc,\n  Params,\n} from './App.interface';\n\n/**\n * Function makes filtering by entries\n * @param {Params} params - required, params of filter\n * @param {Entry[]} entries - required, no filtered entries\n * @returns {Entry[]} returns the filtered entries\n */\n// prettier-ignore\nexport const filterFunction = ({ params, entries }: FilterFunction): Entry[] => {\n  const { column, operation, search }: Params = params;\n\n  const isColumnChoosed: boolean = column.length > 0;\n  const isOperationChoosed: boolean = operation.length > 0;\n  const isSearchFill: boolean = search.length > 0;\n\n  //* If user choosed \"column\" and \"operations\"\n  //* we will be filtering, else nothing\n  if (!isColumnChoosed || !isOperationChoosed) {\n    return entries;\n  }\n  //* If search input is fill\n  //* we will be returns result\n  //* else return prev state\n  if (isSearchFill) {\n    const result: Entry[] = entries.filter((entry: Entry) => {\n      switch (operation) {\n        case 'more': //* return all more then search\n          return search < entry[column];\n        case 'less': //* returns all less then search\n          return search > entry[column];\n        case 'equal': //* strong compare\n          //* If search is NaN we are making compare by\n          //* string, else by number   \n          return isNaN(+search)\n            ? search === entry[column]\n            : +search === entry[column];\n        case 'contains':\n          const str: string = entry[column].toString();\n          return str.includes(search);\n        default:\n          return {};\n      }\n    });\n\n    return result;\n  } else {\n    return entries;\n  }\n};\n\nexport const paginationCalcFunc = ({\n  currentPage,\n  entriesOnPage,\n  entries,\n}: PaginationCalcFunc): Entry[] => {\n  let lastIndex = currentPage * entriesOnPage;\n  let firstIndex = lastIndex - entriesOnPage;\n  let currentEntries = entries.slice(firstIndex, lastIndex);\n\n  return currentEntries;\n};\n","import React, { FC, useEffect, useState } from 'react';\n\nimport Filter from '../../layouts/Filter';\nimport THead from '../../components/THead/THead';\nimport TBody from '../../components/TBody/TBody';\nimport Pagination from '../../layouts/Pagination';\n\nimport './App.css';\nimport { filterFunction, paginationCalcFunc } from './App.functions';\nimport {\n  Entry,\n  Props,\n  Filter as FilterInterface,\n  Params,\n} from './App.interface';\n\n/**\n * App is main component that contains others part of application\n * @returns {React.ReactElement} returns react element\n */\nconst App: FC<Props> = ({}): React.ReactElement => {\n  //* ---------------------------------------------\n  //* Main state of entries\n  const [entries, setEntries] = useState<Entry[]>([]);\n  const [filtered, setFiltered] = useState<Entry[]>([]);\n\n  //* Pagination\n  const [entriesOnPage] = useState(15);\n  const [filteredCount, setFilteredCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const handlePagination = (num: number): void => {\n    setCurrentPage(num);\n  };\n\n  //* Main state of filter\n  const [filter, setFilter] = useState<FilterInterface>({\n    column: {\n      name: false,\n      number: false,\n      distance: false,\n    },\n    operation: {\n      more: false,\n      less: false,\n      equal: false,\n      contains: false,\n    },\n    search: '',\n  });\n\n  //* In this case, we are making request to server, that\n  //* returns all entries from DB and after, set them to state\n  //* \"entries\" and \"filtered\"\n  useEffect(() => {\n    (async () => {\n      //* We are making request to server\n      const req = await fetch(\n        'https://ta-table.herokuapp.com/entries',\n      );\n      const ans = await req.json();\n\n      //* After, we set value to main state\n      setEntries(ans);\n\n      const currentEntries = paginationCalcFunc({\n        currentPage,\n        entriesOnPage,\n        entries: ans,\n      });\n\n      setFiltered(currentEntries);\n      setFilteredCount(ans.length);\n    })();\n  }, []);\n\n  //* In this case we are making filtering by table,\n  //* if \"filter\" state changing\n  useEffect(() => {\n    const newEntries = [...entries];\n    const params: Params = {\n      column: '',\n      operation: '',\n      search: filter.search,\n    };\n\n    for (let column in filter.column) {\n      if (filter.column[column] === true) {\n        params['column'] = column;\n      }\n    }\n\n    for (let operation in filter.operation) {\n      if (filter.operation[operation] === true) {\n        params['operation'] = operation;\n      }\n    }\n\n    //* Function from ./App.functions.ts\n    //* that make filter by entries\n    //* prettier-ignore\n    const filtered: Entry[] = filterFunction({\n      params,\n      entries: newEntries,\n    });\n\n    setFilteredCount(filtered.length);\n\n    //* Create pahination from filtered entries\n    const currentEntries = paginationCalcFunc({\n      currentPage,\n      entriesOnPage,\n      entries: filtered,\n    });\n\n    //* After filtering, set new or old state\n    setFiltered(currentEntries);\n  }, [filter, currentPage]);\n\n  return (\n    <div className=\"application\">\n      <div className=\"application__inner\">\n        <div className=\"table application__table\">\n          <div className=\"table__functions\">\n            <Filter filter={filter} setFilter={setFilter} />\n          </div>\n          <table className=\"table__fields\">\n            <THead />\n            <TBody filtered={filtered} />\n          </table>\n          <div className=\"table__pagination\">\n            <Pagination\n              entries={entries}\n              filteredCount={filteredCount}\n              entriesOnPage={entriesOnPage}\n              currentPage={currentPage}\n              handlePagination={handlePagination}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './application/App/App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}